{"version":3,"sources":["Components/TodoItem.jsx","Components/Todos.jsx","Components/Layout/Header.jsx","Components/AddTodo.jsx","Components/Pages/About.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","style","this","type","marginRight","onChange","markComplete","bind","id","title","onClick","deleteTodo","btn","Component","backgroundColor","color","float","border","borderRadius","cursor","Todos","state","todos","map","key","headerStyle","textAlign","Header","to","AddTodo","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","About","Fragment","App","Axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76edbf40.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport class TodoItem extends Component {\r\n\r\n    getStyle = ()=> {\r\n        return {\r\n            background: \"#f4f4f4\",\r\n            padding: \"10px\",\r\n            borderBottom:\"1px dotted #ccc\",\r\n            textDecoration: this.props.todo.completed ? \"line-through\" : \"none\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" style={{marginRight:\"30px\"}} onChange={this.props.markComplete.bind(this, this.props.todo.id)}/>\r\n                    {this.props.todo.title}\r\n                    <button onClick={this.props.deleteTodo.bind(this, this.props.todo.id)} style={btn}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst btn = {\r\n    backgroundColor: \"red\",\r\n    color:\"white\",\r\n    padding: \"5px 9px\",\r\n    float:\"right\",\r\n    marginRight: 30,\r\n    border:\"none\",\r\n    borderRadius: \"50%\",\r\n    cursor:'pointer',\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from \"./TodoItem\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nclass Todos extends Component {\r\n    state = {  }\r\n\r\n    render() { \r\n        return (  \r\n            <div>\r\n                    {this.props.todos.map(todo=><TodoItem key={todo.id} todo={todo} markComplete = {this.props.markComplete} deleteTodo={this.props.deleteTodo}/>)}\r\n                \r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n        \r\n            <header style={headerStyle}>\r\n                <h1>TodoList</h1>\r\n                <Link style={{color:'white'}} to=\"/\"> Home\r\n                </Link> |  <Link style={{color:'white'}} to=\"/about\">About</Link>\r\n            </header>\r\n       \r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    color:\"white\",\r\n    textAlign:\"center\",\r\n    padding:20,\r\n    backgroundColor:\"#020202\"\r\n\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react';\r\n\r\nclass AddTodo extends Component {\r\n    state= {}\r\n    onChange= (e)=>{\r\nthis.setState({[e.target.name]:e.target.value})\r\n    }\r\n    onSubmit=(e) =>{\r\n        e.preventDefault()\r\n        this.props.addTodo(this.state.title)\r\n        this.setState({title:''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display:\"flex\"}}>\r\n            <input type=\"text\" name=\"title\"\r\n            placeholder=\"Add Todo ...\"\r\n            style={{flex:\"10\", padding:5}}\r\n            value={this.state.title}\r\n            onChange={this.onChange}\r\n            />\r\n            <button type=\"submit\" className=\"btn\" style={{flex:1}}>Add Todo</button>\r\n        </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is my first Todo List app with React.</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Todos from './Components/Todos';\nimport Header from \"./Components/Layout/Header\";\nimport AddTodo from './Components/AddTodo';\nimport About from './Components/Pages/About';\nimport Axios from 'axios';\n\n\nclass App extends Component {\n  state = {\n    todos: [],}\n\ncomponentDidMount(){\n      Axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\").then(res =>this.setState({todos: res.data}))\n  \n}\n\nmarkComplete=(id) => {\n  this.setState({todos: this.state.todos.map(todo=>{\n    if(todo.id === id){\n      todo.completed = !todo.completed\n    }\n    return todo\n  })})\n}\n\ndeleteTodo=(id) => {\n  Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then(res => this.setState({todos: [...this.state.todos.filter(todo=>{\n    return todo.id !== id\n})]}))\n  \n}\n\naddTodo = (title) => {\n    Axios.post(\"https://jsonplaceholder.typicode.com/todos\", {\n      title,\n      completed: false\n    }).then(res=>this.setState({todos:[...this.state.todos,res.data]}));\n    \n}\n\n  render() { \n    return ( \n      <Router>\n        <div className=\"container\">\n        <Header />\n        <Route exact path=\"/\" render = {props => (\n          <React.Fragment>\n            <AddTodo addTodo = {this.addTodo}/>\n            <Todos todos = {this.state.todos} markComplete = {this.markComplete} deleteTodo = {this.deleteTodo}/>\n          </React.Fragment>\n        )} />\n\n        <Route path=\"/about\" component={About} />\n        \n        </div> \n      </Router>\n      );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}